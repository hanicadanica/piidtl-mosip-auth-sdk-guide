{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Auth SDK Guide","text":"<p>This guide details the step-by-step of how to use the MOSIP Authentication Python SDK.</p>"},{"location":"#pre-requisites","title":"Pre-Requisites","text":"<ol> <li> <p>Download the MOSIP-signed certificate, the IDA partner certificate, and the keystore files here. These are the certificates returned by MOSIP after partner onboarding. The password for the keystore files will be provided.</p> </li> <li> <p>Obtain a UIN to be used for testing out the SDK. For MOSIP's Collab environment, this can be done via this Google form. Otherwise, this set of mock data can also be used for testing.</p> </li> <li> <p>Install Python and pip.</p> </li> </ol>"},{"location":"#installing-the-auth-sdk","title":"Installing the Auth SDK","text":"<p>Use <code>pip install</code> to install the SDK.</p> <pre><code>pip install git+https://github.com/mosip/ida-auth-sdk.git@v0.9.0\n</code></pre>"},{"location":"#configuring-the-auth-sdk","title":"Configuring the Auth SDK","text":"<ol> <li> <p>Create a <code>config.toml</code> configuration file. A sample configuration file can be seen below.</p> <pre><code>[mosip_auth]\ntimestamp_format = \"%Y-%m-%dT%H:%M:%S\"\nida_auth_version = \"1.0\"\nida_auth_request_demo_id = \"mosip.identity.auth\"\nida_auth_request_kyc_id = \"mosip.identity.kyc\"\nida_auth_request_otp_id = \"mosip.identity.otp\"\nida_auth_env = \"Staging\"\nauthorization_header_constant = \"Authorization\"\npartner_apikey = \"\"\npartner_misp_lk = \"\"\npartner_id = \"\"\n\n[mosip_auth_server]\nida_auth_domain_uri = \"\"\nida_auth_url = \"\"\n\n[crypto_encrypt]\nsymmetric_key_size = 256\nsymmetric_nonce_size = 128\nsymmetric_gcm_tag_size = 128\nencrypt_cert_path = \"\"\ndecrypt_p12_file_path = \"\"\ndecrypt_p12_file_password = \"\"\n\n[crypto_signature]\nalgorithm = \"RS256\"\nsign_p12_file_path =  \"\"\nsign_p12_file_password = \"\"\n\n[logging]\nlog_file_path = \"authenticator.log\"\nlog_format = \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"\nloglevel = \"DEBUG\" # can be one of \"DEBUG\" | \"INFO\" | \"WARNING\" | \"ERROR\" | \"CRITICAL\"\n</code></pre> </li> <li> <p>For testing purposes, input the following partner values into the configuration file:</p> <ul> <li>partner_apikey: <code>906308</code></li> <li>partner_misp_lk: <code>9FChkkfixwsSFSvBaA7oCOkfNnBUj2XIZObAtyOGHsIAyG0JOG</code></li> <li>partner_id: <code>mpartner-default-piidtl</code></li> </ul> <p>These values are normally received from MOSIP during partner onboarding.</p> </li> <li> <p>For the ID Authentication URLS, input the following values:</p> <ul> <li>ida_auth_domain_url: <code>https://api-internal.collab.mosip.net</code></li> <li>ida_auth_url: <code>https://api.collab.mosip.net/idauthentication/v1</code></li> </ul> </li> <li> <p>For the certificate and keystore file paths, input the following values:</p> <ul> <li>encrypt_cert_path: the path to the <code>ida_partner.pem</code> certificate</li> <li>decrypt_p12_file_path: the path to the <code>keystore.p12</code> certificate</li> <li>decrypt_p12_file_password: the password of the <code>keystore.p12</code> certificate</li> <li>sign_p12_file_path: the path to the <code>keystore_sign.p12</code> certificate</li> <li>sign_p12_file_password: the password of the <code>keystore_sign.p12</code> certificate</li> </ul> </li> </ol> <p>The next sections show how to use the SDK for different types of authentication.</p>"},{"location":"#what-the-certificates-are-for","title":"What the Certificates are For","text":"<p>The keystore file contains the partner's certificate (not yet signed by MOSIP) and private key. On the other hand, the signed keystore file contains the certificate that was signed by MOSIP, and this is what is used to sign the authentication requests. To encrypt authentication requests, the IDA Partner certificate (which also comes from MOSIP) is used.</p>"},{"location":"#more-information","title":"More Information","text":"<p>MOSIP Auth SDK Configuration Parameters</p>"},{"location":"partner_onboarding/","title":"Partner Onboarding","text":"<p>Before the Authentication SDK can be used, an authentication partner (you) must first be onboarded into the MOSIP system. This involves generating certificates, submitting them to MOSIP to be approved and signed, and receiving the signed certificates, a partner ID, and an API key.</p> <p>Details of the requirements can be found here.</p>"},{"location":"partner_onboarding/#generating-certificates","title":"Generating Certificates","text":"<p>In order to be onboarded as a partner, partner certificates must be created and submitted to MOSIP who, in turn, will sign and return the certificates ready to be used for authentication.</p> <p>MOSIP has provided a Windows script for generating the required certificates, found here. Change the appropriate attributes in <code>cert.properties</code> configuration file as needed, and make sure to have <code>npm</code> installed as it is needed by the script. Note that this script and the certificates it generates are to be used for testing only.</p> <p>Once the certificates have been generated in the <code>certs/</code> folder, obtain the <code>Client.pem</code>, <code>RootCA.pem</code>, and <code>keystore.p12</code> files. These are the certificates that have to be submitted to MOSIP.</p>"},{"location":"partner_onboarding/#submitting-certificates-to-mosip","title":"Submitting Certificates to MOSIP","text":"<p>After obtaining the necessary certificates, they have to be submitted to MOSIP in order to be onboarded as an authentication partner.</p>"},{"location":"partner_onboarding/#via-the-partner-management-portal","title":"Via the Partner Management Portal","text":"<p>Currently, MOSIP has a Partner Management Portal in their Collab environment where partners should be able to upload their certificates. Details on how to do so can be found here and here.</p>"},{"location":"partner_onboarding/#via-a-direct-email-to-mosip","title":"Via a Direct Email to MOSIP","text":"<p>If the Partner Management Portal is unavailable or the certificates cannot be uploaded, it may also be possible to email MOSIP at getsupport@mosip.io for manual partner onboarding.</p>"},{"location":"partner_onboarding/#after-successful-onboarding","title":"After Successful Onboarding","text":"<p>Once an authentication partner has been onboarded, they should have the following:</p> <ul> <li>a MOSIP-signed certificate</li> <li>an IDA partner certificate</li> <li>a partner ID</li> <li>a partner API key</li> <li>an MISP license key</li> </ul> <p>The latter four items are used as-is in the Authentication SDK. The MOSIP-signed certificate, on the other hand, is used to sign the authentication partner's <code>keystore.p12</code> keystore file (as described in Generating Certificates).</p>"},{"location":"partner_onboarding/#preparing-the-signed-keystore-file","title":"Preparing the Signed Keystore File","text":"<p>For signing the keystore file, MOSIP recommends using Keystore Explorer.</p> <ol> <li>Download Keystore Explorer, open it, and select Open an existing KeyStore.</li> <li>Open the <code>keystore.p12</code> file and enter its password.</li> <li>Right-click on the keystore entry and select Import CA Reply &gt; From File.</li> <li>Change the type of file to search for to PEM files (.pem) and select the MOSIP-signed certificate.</li> <li>Save the changes to a new keystore file such as <code>keystore_signed.p12</code>.</li> </ol> <p>The <code>keystore.p12</code> and <code>keystore_signed.p12</code> files can now be used along with the IDA partner certificate to authenticate using the Authentication SDK.</p>"},{"location":"using_the_auth_sdk/","title":"Using the Auth SDK","text":"<p>The MOSIP Authentication SDK can perform both yes/no and KYC authentications, with support for multi-factor authentication using biometrics, demographic data, and OTPs (see Authentication Types for more information). In this guide, however, only demographic data and OTPs are used for yes/no and KYC authentication since a third-party SDK is needed to capture biometric data.</p>"},{"location":"using_the_auth_sdk/#auth-sdk-example","title":"Auth SDK Example","text":"<p>Here is a working example of an authentication request.</p> Yes/No Auth<pre><code>from mosip_auth_sdk.models import DemographicsModel\nfrom mosip_auth_sdk import MOSIPAuthenticator\nfrom dynaconf import Dynaconf\n\nconfig = Dynaconf(settings_files=[\"./config.toml\"], environments=False)\nauthenticator = MOSIPAuthenticator(config=config)\n\ndemographics_data = DemographicsModel(dob=\"1992/04/29\")\n\nresponse = authenticator.auth(\n    individual_id=\"2047631038\",\n    individual_id_type=\"UIN\",\n    demographic_data=demographics_data,\n    consent=True,\n)\n\nresponse_body = response.json()\nprint(response_body)\n</code></pre> <p>Before authenticating, a <code>MOSIPAuthenticator</code> object that uses the config file described in the previous section has to be created.</p> <p>Create a <code>Dynaconf</code> object whose <code>settings_files</code> points to the path of the previously created <code>config.toml</code>, then use this object to create the <code>MOSIPAuthenticator</code> object.</p> Yes/No Auth<pre><code>from mosip_auth_sdk.models import DemographicsModel\nfrom mosip_auth_sdk import MOSIPAuthenticator\nfrom dynaconf import Dynaconf\n\nconfig = Dynaconf(settings_files=[\"./config.toml\"], environments=False)\nauthenticator = MOSIPAuthenticator(config=config)\n\ndemographics_data = DemographicsModel(dob=\"1992/04/29\")\n\nresponse = authenticator.auth(\n    individual_id=\"2047631038\",\n    individual_id_type=\"UIN\",\n    demographic_data=demographics_data,\n    consent=True,\n)\n\nresponse_body = response.json()\nprint(response_body)\n</code></pre> <p>The next sections detail how to use the SDK to perform yes/no and KYC authentications.</p>"},{"location":"using_the_auth_sdk/kyc_authentication/","title":"KYC Authentication","text":"<p>KYC (Know Your Client) Authentication is used to obtain a set of attributes related to an individual (e.g. their full address, their name in another language) given their ID and another piece of identifying data, such as their biometrics or an OTP. The set of attributes that can be shared with a relying party depends on the policy set by MOSIP, so it is possible that not all individual attributes are shared to a relying party.</p>"},{"location":"using_the_auth_sdk/kyc_authentication/#authenticating-using-demographic-data","title":"Authenticating using Demographic Data","text":"<p>KYC authentication can be performed using the <code>authenticator.kyc()</code> method shown below. Similar to a yes/no authentication request, the ID of the individual and the type of the ID must be provided in the KYC authentication request, along with some demographic data (using a <code>DemographicsModel</code> object) and individual consent.</p> KYC Auth<pre><code>from mosip_auth_sdk.models import DemographicsModel\nfrom mosip_auth_sdk import MOSIPAuthenticator\nfrom dynaconf import Dynaconf\n\nconfig = Dynaconf(settings_files=[\"./config.toml\"], environments=False)\nauthenticator = MOSIPAuthenticator(config=config)\n\ndemographics_data = DemographicsModel(name=[{\"language\": \"eng\", \"value\": \"James Rodrigious\"}])\n\nresponse = authenticator.kyc(\n    individual_id=\"2047631038\",\n    individual_id_type=\"UIN\",\n    demographic_data=demographics_data,\n    consent=True,\n)\n\nresponse_body = response.json()\nprint(response_body)\n</code></pre> <p>Just like with yes/no authentication, the response from MOSIP can be obtained using <code>response.json()</code>. The individual attributes in this response, however, are still encrypted in the <code>identity</code> parameter:</p> Successful KYC Auth without Decryption<pre><code>{\n    \"transactionID\": \"2024805211\",\n    \"version\": \"1.0\",\n    \"id\": \"mosip.identity.kyc\",\n    \"errors\": None,\n    \"responseTime\": \"2025-01-16T10:51:10.692Z\",\n    \"response\": {\n        \"kycStatus\": True,\n        \"authToken\": \"257988270191056778127490615141298322\",\n        \"thumbprint\": [thumbprint],\n        \"identity\": [identity_data],\n        \"sessionKey\": [session_key]\n    }\n}\n</code></pre> <p>To obtain the individual attributes, decrypt the response using <code>authenticator.decrypt_response()</code>:</p> Decrypting the Response<pre><code>from mosip_auth_sdk.models import DemographicsModel\nfrom mosip_auth_sdk import MOSIPAuthenticator\nfrom dynaconf import Dynaconf\n\nconfig = Dynaconf(settings_files=[\"./config.toml\"], environments=False)\nauthenticator = MOSIPAuthenticator(config=config)\n\ndemographics_data = DemographicsModel(name=[{\"language\": \"eng\", \"value\": \"James Rodrigious\"}])\n\nresponse = authenticator.kyc(\n    individual_id=\"2047631038\",\n    individual_id_type=\"UIN\",\n    demographic_data=demographics_data,\n    consent=True,\n)\n\nresponse_body = response.json()\ndecrypted_response = authenticator.decrypt_response(response_body)\nprint(decrypted_response)\n</code></pre> <p>The decrypted response of a successful authentication request is shown below. Attributes in multiple languages, when available, are also included in the response.</p> Decrypted Response of Successful KYC Auth<pre><code>{\n    \"location1_eng\": \"ABC City\",\n    \"name_eng\": \"James Rodrigious\",\n    \"gender_eng\": \"Male\",\n    \"location1_ara\": \"\u0627\u0644\u0631\u0628\u0627\u0637\",\n    \"name_ara\": \"\u0631\u0648\u0646\u0627\u0643 \u0646\u0627\u064a\u0627\u0643\",\n    \"gender_ara\": \"\u0630\u0643\u0631\",\n    \"location1_fra\": \"ABC City\",\n    \"name_fra\": \"James Rodrigious\",\n    \"gender_fra\": \"Male\",\n    \"phone\": \"8763740607\",\n    \"dob\": \"1992/04/29\",\n    \"email\": \"james@test.io\",\n    \"face\": [face_data]\n}\n</code></pre> <p>If the KYC authentication request was unsuccessful, the response would look something like this:</p> Unsuccessful KYC Auth with Error<pre><code>{\n    \"transactionID\": \"4460816640\",\n    \"version\": \"1.0\",\n    \"id\": \"mosip.identity.kyc\",\n    \"errors\": [\n        {\n            \"errorCode\": \"IDA-DEA-001\",\n            \"errorMessage\": \"Demographic data name in eng did not match\",\n            \"actionMessage\": \"Please re-enter your name in eng\"\n        }\n    ],\n    \"responseTime\": \"2025-01-16T10:53:52.884Z\",\n    \"response\": {\n        \"kycStatus\": False,\n        \"authToken\": \"257988270191056778127490615141298322\",\n        \"thumbprint\": None,\n        \"identity\": None,\n        \"sessionKey\": None\n    }\n}\n</code></pre> <p>Note that the encrypted attributes in <code>identity</code> are not included in the response since the authentication request was unsuccessful.</p>"},{"location":"using_the_auth_sdk/kyc_authentication/#how-it-works","title":"How it Works","text":"<p>Below is a sequence diagram showing the flow of a KYC authentication request using the SDK.</p> <p>Similar to yes/no authentication, an individual gives their ID and some demographic data to the relying party who then uses the SDK's <code>authenticator.kyc()</code> method to perform a KYC authentication. When this method is invoked, the SDK sends a POST request containing the ID and the demographic data to the KYC authentication endpoint of MOSIP. In response, MOSIP sends a JSON containing the encrypted individual attributes and additional metadata. Which attributes are shared to the relying party are determined by the policy set by MOSIP. The SDK then decrypts the response using <code>authenticator.decrypt_response()</code> to get the plaintext individual attributes which are returned to the relying party.</p> <pre><code>sequenceDiagram\n  autonumber\n  Individual-&gt;&gt;Relying Party: UIN, demographic data&lt;br&gt;(e.g. name, date of birth)\n  Relying Party-&gt;&gt;SDK: authenticator.kyc(UIN, demographic data)\n  SDK-&gt;&gt;MOSIP: POST&lt;br&gt;/idauthentication/v1/kyc/[partner_misp_lk]/[partner_id]/[partner_api_key]\n  MOSIP-&gt;&gt;SDK: encrypted attributes + metadata\n  SDK-&gt;&gt;SDK: authenticator.decrypt_response(response)\n  SDK-&gt;&gt;Relying Party: decrypted attributes + metadata</code></pre>"},{"location":"using_the_auth_sdk/otp_authentication/","title":"OTP Authentication","text":"<p>Instead of demographic data, OTPs can also be used for both yes/no and KYC authentications. They can also be used in combination with demographic data. The Authentication SDK can be used to generate OTPs and verify them in authentication requests.</p>"},{"location":"using_the_auth_sdk/otp_authentication/#generating-an-otp","title":"Generating an OTP","text":"<p>To generate an OTP for an individual, use the <code>authenticator.genotp()</code> method shown below. Provide the ID of the individual and the type of ID, then specify whether to send the OTP to the individual's registered email or phone number (or both).</p> Generating an OTP<pre><code>from mosip_auth_sdk import MOSIPAuthenticator\nfrom dynaconf import Dynaconf\n\nconfig = Dynaconf(settings_files=[\"./config.toml\"], environments=False)\nauthenticator = MOSIPAuthenticator(config=config)\n\nresponse = authenticator.genotp(\n    individual_id=\"2047631038\",\n    individual_id_type=\"UIN\",\n    email=True,\n    phone=True,\n)\n\nresponse_body = response.json()\nprint(response_body)\n</code></pre> <p>Use <code>response.json()</code> to get the response, which would look something like this:</p> Successful OTP Generation<pre><code>{\n    \"id\": \"mosip.identity.otp\",\n    \"version\": \"1.0\",\n    \"transactionID\": \"1929353076\",\n    \"responseTime\": \"2025-01-16T10:58:24.262Z\",\n    \"errors\": None,\n    \"response\": {\n        \"maskedMobile\": \"XXXXXX0607\",\n        \"maskedEmail\": \"XXmXX@test.io\"\n    }\n}\n</code></pre>"},{"location":"using_the_auth_sdk/otp_authentication/#using-the-otp-in-authentication-requests","title":"Using the OTP in Authentication Requests","text":"<p>To use OTPs in authentication requests, save the <code>transactionID</code> from the response in the OTP generation request detailed above. Input this along with the actual generated OTP into the <code>authenticator.auth()</code> or <code>authenticator.kyc()</code> method. For testing purposes, the OTP is always <code>111111</code> when using mock data.</p> Using OTP in a KYC Auth Request<pre><code>from mosip_auth_sdk import MOSIPAuthenticator\nfrom dynaconf import Dynaconf\n\nconfig = Dynaconf(settings_files=[\"./config.toml\"], environments=False)\nauthenticator = MOSIPAuthenticator(config=config)\n\nresponse = authenticator.genotp(\n    individual_id=\"2047631038\",\n    individual_id_type=\"UIN\",\n    email=True,\n    phone=True,\n)\n\nresponse_body = response.json()\ntransaction_id = response_body[\"transactionID\"]\n\nresponse = authenticator.kyc(\n    individual_id=\"2047631038\",\n    individual_id_type=\"UIN\",\n    consent=True,\n    otp_value=\"111111\",\n    txn_id=transaction_id,\n)\n\nresponse_body = response.json()\ndecrypted_response = authenticator.decrypt_response(response_body)\nprint(decrypted_response)\n</code></pre> <p>When the correct OTP and transaction ID are provided, the authentication is successful. On the other hand, the following shows the response when an incorrect OTP is inputted:</p> Using an Incorrect OTP<pre><code>{\n    \"transactionID\": \"2094084565\",\n    \"version\": \"1.0\",\n    \"id\": \"mosip.identity.kyc\",\n    \"errors\": [\n        {\n            \"errorCode\": \"IDA-OTA-004\",\n            \"errorMessage\": \"OTP is invalid\",\n            \"actionMessage\": \"Please provide correct OTP value\"\n        }\n    ],\n    \"responseTime\": \"2025-01-16T11:02:15.233Z\",\n    \"response\": {\n        \"kycStatus\": False,\n        \"authToken\": \"257988270191056778127490615141298322\",\n        \"thumbprint\": None,\n        \"identity\": None,\n        \"sessionKey\": None\n    }\n}\n</code></pre> <p>The response shown below is what is received when an incorrect transaction ID is inputted:</p> Using an Incorrect Transaction ID<pre><code>{\n    \"transactionID\": None,\n    \"version\": None,\n    \"id\": None,\n    \"errors\": [\n        {\n            \"errorCode\": \"IDA-OTA-005\",\n            \"errorMessage\": \"Input transactionID does not match transactionID of OTP Request\"\n        }\n    ],\n    \"responseTime\": \"2025-01-16T11:04:00.084Z\",\n    \"response\": {\n        \"kycStatus\": False,\n        \"authToken\": None,\n        \"thumbprint\": None,\n        \"identity\": None,\n        \"sessionKey\": None\n    }\n}\n</code></pre> <p>It is important to note that either demographic data, an OTP, or both must be provided when performing yes/no or KYC authentications. If neither is provided, the following response is received:</p> No Demographic Data or OTP Provided<pre><code>{\n    \"transactionID\": None,\n    \"version\": None,\n    \"id\": None,\n    \"errors\": [\n        {\n            \"errorCode\": \"IDA-MLC-008\",\n            \"errorMessage\": \"No authentication type selected\"\n        }\n    ],\n    \"responseTime\": \"2025-01-17T11:47:24.895Z\",\n    \"response\": {\n        \"kycStatus\": False,\n        \"authToken\": None,\n        \"thumbprint\": None,\n        \"identity\": None,\n        \"sessionKey\": None\n    }\n}\n</code></pre>"},{"location":"using_the_auth_sdk/otp_authentication/#how-it-works","title":"How it Works","text":"<p>Below is a sequence diagram showing how the OTP generation works using the Authentication SDK.</p> <p>When an individual requests for an OTP from a relying party by providing their ID, the relying party uses the <code>authenticator.genotp()</code> method of the SDK to generate the OTP. Through this method, the SDK sends a POST request containing the ID to the OTP generation endpoint of MOSIP. MOSIP then generates and sends the OTP to the individual specified by the ID. It also responds to the SDK's request with the transaction ID and other metadata. The OTP (received by the individual) and the transaction ID can then be used by the relying party when authenticating using the SDK.</p> <pre><code>sequenceDiagram\n  autonumber\n  Individual-&gt;&gt;Relying Party: UIN\n  Relying Party-&gt;&gt;SDK: authenticator.genotp(UIN)\n  SDK-&gt;&gt;MOSIP: POST&lt;br&gt;/idauthentication/v1/otp/[partner_misp_lk]/[partner_id]/[partner_api_key]\n  MOSIP-&gt;&gt;SDK: metadata (including transaction ID)\n  MOSIP-&gt;&gt;Individual: OTP\n  SDK-&gt;&gt;Relying Party: metadata (including transaction ID)\n  activate Relying Party\n  Individual-&gt;&gt;Relying Party: OTP\n  Relying Party-&gt;&gt;SDK: authenticator.auth(UIN, OTP, transaction_id)\n  deactivate Relying Party\n  SDK-&gt;&gt;MOSIP: POST&lt;br&gt;/idauthentication/v1/auth/[partner_misp_lk]/[partner_id]/[partner_api_key]\n  MOSIP-&gt;&gt;SDK: authStatus (true/false) + metadata\n  SDK-&gt;&gt;Relying Party: authStatus (true/false) + metadata</code></pre>"},{"location":"using_the_auth_sdk/yes_no_authentication/","title":"Yes/No Authentication","text":"<p>Yes/No authentication is used to verify if the given attributes of an individual (in this case demographic data) and the individual's ID (which could be a UIN or VID) are a match. It essentially tells the relying party (i.e. authentication partner like banks and government institutes) whether or not an individual is who they say they are based on the given information.</p>"},{"location":"using_the_auth_sdk/yes_no_authentication/#authenticating-using-demographic-data","title":"Authenticating using Demographic Data","text":"<p>Yes/no authentication can be performed using the <code>authenticator.auth()</code> method shown below. Provide the ID of the individual and the type of the ID. In addition, the demographic data to be verified must be provided in the form of a <code>DemographicsModel</code> object. Consent must also be given by the individual, but for the purposes of testing this can just be set to <code>True</code> when using the SDK.</p> Yes/No Auth<pre><code>from mosip_auth_sdk.models import DemographicsModel\nfrom mosip_auth_sdk import MOSIPAuthenticator\nfrom dynaconf import Dynaconf\n\nconfig = Dynaconf(settings_files=[\"./config.toml\"], environments=False)\nauthenticator = MOSIPAuthenticator(config=config)\n\ndemographics_data = DemographicsModel(dob=\"1992/04/29\")\n\nresponse = authenticator.auth(\n    individual_id=\"2047631038\",\n    individual_id_type=\"UIN\",\n    demographic_data=demographics_data,\n    consent=True,\n)\n\nresponse_body = response.json()\nprint(response_body)\n</code></pre> <p>To obtain the response from MOSIP, simply use <code>response.json()</code>.</p> Yes/No Auth<pre><code>from mosip_auth_sdk.models import DemographicsModel\nfrom mosip_auth_sdk import MOSIPAuthenticator\nfrom dynaconf import Dynaconf\n\nconfig = Dynaconf(settings_files=[\"./config.toml\"], environments=False)\nauthenticator = MOSIPAuthenticator(config=config)\n\ndemographics_data = DemographicsModel(dob=\"1992/04/29\")\n\nresponse = authenticator.auth(\n    individual_id=\"2047631038\",\n    individual_id_type=\"UIN\",\n    demographic_data=demographics_data,\n    consent=True,\n)\n\nresponse_body = response.json()\nprint(response_body)\n</code></pre> <p>The following example response is what a successful yes/no authentication request (i.e. the given ID and the given demographic data match) would look like:</p> Successful Yes/No Auth<pre><code>{\n    \"transactionID\": \"4170364546\",\n    \"version\": \"1.0\",\n    \"id\": \"mosip.identity.auth\",\n    \"errors\": None,\n    \"responseTime\": \"2025-01-16T10:40:40.511Z\",\n    \"response\": {\n        \"authStatus\": True,\n        \"authToken\": \"257988270191056778127490615141298322\"\n    }\n}\n</code></pre> <p>On the other hand, this is what the response would look like if the yes/no authentication request was unsuccessful:</p> Unsuccessful Yes/No Auth with Error<pre><code>{\n    \"transactionID\": \"6742462846\",\n    \"version\": \"1.0\",\n    \"id\": \"mosip.identity.auth\",\n    \"errors\": [\n        {\n            \"errorCode\": \"IDA-DEA-001\",\n            \"errorMessage\": \"Demographic data dob did not match\",\n            \"actionMessage\": \"Please re-enter your dob\"\n        }\n    ],\n    \"responseTime\": \"2025-01-16T10:42:34.064Z\",\n    \"response\": {\n        \"authStatus\": False,\n        \"authToken\": \"257988270191056778127490615141298322\"\n    }\n}\n</code></pre>"},{"location":"using_the_auth_sdk/yes_no_authentication/#demographicsmodel","title":"DemographicsModel","text":"<p>Any number and combination of demographic attributes can be used for authentication (e.g. name only, name and date of birth, phone number and email). A <code>DemographicsModel</code> object is created with these attributes and is passed into the authentication function. Some of the attributes that can be used in <code>DemographicsModel</code> are:</p> <ul> <li><code>age</code></li> <li><code>dob</code></li> <li><code>phoneNumber</code></li> <li><code>emailId</code></li> <li><code>postalCode</code></li> <li><code>name</code></li> <li><code>gender</code></li> <li><code>fullAddress</code></li> </ul> <p>Because MOSIP has support for multiple languages, attributes such as <code>name</code>, <code>gender</code>, and <code>fullAddress</code> need to have their languages specified. These attributes are represented by a list of dictionaries, where each dictionary contains a language and the attribute written in that language.</p> Yes/No Auth with Name Specified<pre><code>from mosip_auth_sdk.models import DemographicsModel\nfrom mosip_auth_sdk import MOSIPAuthenticator\nfrom dynaconf import Dynaconf\n\nconfig = Dynaconf(settings_files=[\"./config.toml\"], environments=False)\nauthenticator = MOSIPAuthenticator(config=config)\n\ndemographics_data = DemographicsModel(name=[{\"language\": \"eng\", \"value\": \"James Rodrigious\"}])\n\nresponse = authenticator.auth(\n    individual_id=\"2047631038\",\n    individual_id_type=\"UIN\",\n    demographic_data=demographics_data,\n    consent=True,\n)\n\nresponse_body = response.json()\nprint(response_body)\n</code></pre>"},{"location":"using_the_auth_sdk/yes_no_authentication/#how-it-works","title":"How it Works","text":"<p>Below is a sequence diagram showing the flow of a yes/no authentication request using the SDK.</p> <p>An individual first gives their ID and some demographic data (like their name or date of birth) to the relying party. The relying party then uses the SDK's <code>authenticator.auth()</code> method to perform a yes/no authentication. This method makes the SDK send a POST request containing the ID and the demographic data to the ID authentication endpoint of MOSIP. In response, MOSIP sends a JSON containing the authentication status with additional data such as the transaction (i.e. request) ID and response time. The SDK then forwards this JSON as is to the relying party.</p> <pre><code>sequenceDiagram\n  autonumber\n  Individual-&gt;&gt;Relying Party: UIN, demographic data&lt;br&gt;(e.g. name, date of birth)\n  Relying Party-&gt;&gt;SDK: authenticator.auth(UIN, demographic data)\n  SDK-&gt;&gt;MOSIP: POST&lt;br&gt;/idauthentication/v1/auth/[partner_misp_lk]/[partner_id]/[partner_api_key]\n  MOSIP-&gt;&gt;SDK: authStatus (true/false) + metadata\n  SDK-&gt;&gt;Relying Party: authStatus (true/false) + metadata</code></pre>"}]}